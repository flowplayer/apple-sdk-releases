// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-tvos14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FlowplayerSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
@_exported import FlowplayerSDK
import Foundation
import GoogleInteractiveMediaAds
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class Flowplayer {
  public static let current: FlowplayerSDK.Flowplayer
  public var config: FlowplayerSDK.SDKConfig
  public var accessToken: Swift.String?
  public var version: Swift.String? {
    get
  }
  final public let sessionID: Foundation.UUID
  @objc deinit
}
extension FlowplayerSDK.Flowplayer {
  public func configure()
}
extension Foundation.NSNotification.Name {
  public static let flowplayerViewDidChangeLifecycle: Foundation.Notification.Name
  public static let flowplayerViewDidChageFullscreen: Foundation.Notification.Name
  public static let flowplayerViewDidEncounterError: Foundation.Notification.Name
  public static let flowplayerViewDidChangeVisibility: Foundation.Notification.Name
  public static let flowplayerViewDidChangeControlsVisibility: Foundation.Notification.Name
}
public enum ViewLifecycle : Swift.Int {
  case created
  case destroyed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SeekState {
  case idle
  case seeking
  case seeked
  public static func == (a: FlowplayerSDK.SeekState, b: FlowplayerSDK.SeekState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AdType : Swift.Int {
  case preRoll
  case midRoll
  case postRoll
  case unknown
  public var stringValue: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class FlowplayerManager {
  final public var adViewController: UIKit.UIViewController? {
    get
    set
  }
  public init(avPlayer: AVFoundation.AVPlayer)
  @objc deinit
}
extension FlowplayerSDK.FlowplayerManager : FlowplayerSDK.FlowplayerManagerAPI {
  final public var quality: FlowplayerSDK.PlayerQuality? {
    get
  }
  final public var adDelegate: (any FlowplayerSDK.FlowplayerAdDelegate)? {
    get
    set
  }
  final public var currentSubtitle: FlowplayerSDK.SubtitleTrack? {
    get
  }
  final public var currentAudio: FlowplayerSDK.AudioTrack? {
    get
  }
  final public var subtitleList: [FlowplayerSDK.SubtitleTrack] {
    get
  }
  final public var audioList: [FlowplayerSDK.AudioTrack] {
    get
  }
  final public var avPlayer: AVFoundation.AVPlayer? {
    get
    set
  }
  final public var autoPlay: Swift.Bool {
    get
    set
  }
  final public var sourceURL: Foundation.URL? {
    get
  }
  final public var state: FlowplayerSDK.PlayerState {
    get
  }
  final public var stateList: [FlowplayerSDK.PlayerState] {
    get
  }
  final public var playbackState: FlowplayerSDK.PlaybackState {
    get
  }
  final public var playbackStateList: [FlowplayerSDK.PlaybackState] {
    get
  }
  final public var duration: CoreMedia.CMTime? {
    get
  }
  final public var position: CoreMedia.CMTime? {
    get
  }
  final public var rate: Swift.Float {
    get
    set
  }
  final public var media: (any FlowplayerSDK.Media)? {
    get
  }
  final public var mediaHistoryList: [any FlowplayerSDK.Media] {
    get
  }
  final public var preferredPeakBitRate: Swift.Double? {
    get
  }
  final public var volume: Swift.Float {
    get
    set
  }
  final public var bufferLoadedPercented: Swift.Double {
    get
  }
  final public var isMuted: Swift.Bool {
    get
    set
  }
  final public var isReady: Swift.Bool {
    get
  }
  final public var delegate: (any FlowplayerSDK.FlowplayerDelegate)? {
    get
    set
  }
  final public var playbackType: FlowplayerSDK.PlaybackType {
    get
  }
  final public var ovpConfig: FlowplayerSDK.OVPConfig? {
    get
  }
  final public func load(external media: FlowplayerSDK.MediaExternal)
  final public func load(ovp media: FlowplayerSDK.MediaOVP)
  final public func reload() -> Swift.Bool
  final public func pause()
  final public func play()
  final public func stop()
  final public func seek(_ value: Swift.Double)
  final public func selectTrack(audio id: Swift.Int)
  final public func selectTrack(subtitle id: Swift.Int)
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case debug
  case info
  case warning
  case error
  public var emoji: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FlowplayerSDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [FlowplayerSDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension FlowplayerSDK.LogLevel : Swift.Comparable {
  public static func < (lhs: FlowplayerSDK.LogLevel, rhs: FlowplayerSDK.LogLevel) -> Swift.Bool
}
public struct OVPAd : Swift.Equatable {
  public let timeout: Swift.Int
  public let time: Swift.Int?
  public let adTag: Swift.String
  public let adTagId: Swift.String?
  public var adTagUrl: Foundation.URL? {
    get
  }
  public static func == (a: FlowplayerSDK.OVPAd, b: FlowplayerSDK.OVPAd) -> Swift.Bool
}
extension FlowplayerSDK.OVPAd : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKConfig {
  public var disableLogging: Swift.Bool
  public var loggerLevels: [FlowplayerSDK.LogLevel]
}
public struct AudioTrack : Swift.Encodable, Swift.Equatable {
  public let id: Swift.Int
  public let name: Swift.String
  public let lang: Swift.String?
  public static func == (a: FlowplayerSDK.AudioTrack, b: FlowplayerSDK.AudioTrack) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol FlowplayerAdDelegate : AnyObject {
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeAdState state: FlowplayerSDK.AdState, for adType: FlowplayerSDK.AdType)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didAdFailWith error: FlowplayerSDK.AdError)
}
extension FlowplayerSDK.FlowplayerAdDelegate {
  public func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeAdState state: FlowplayerSDK.AdState, for adType: FlowplayerSDK.AdType)
  public func player(_ player: any FlowplayerSDK.FlowplayerAPI, didAdFailWith error: FlowplayerSDK.AdError)
}
public enum AdError : Swift.Error {
  case noAdAvailable
  case adLoadFailed
  case adDisplayError
  case noAvPlayerInstance
  case invalidAdRequest
  public static func == (a: FlowplayerSDK.AdError, b: FlowplayerSDK.AdError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FlowplayerSDK.AdError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct SubtitleTrack : Swift.Codable, Swift.Equatable {
  public let id: Swift.Int
  public let name: Swift.String
  public let lang: Swift.String?
  public static func == (a: FlowplayerSDK.SubtitleTrack, b: FlowplayerSDK.SubtitleTrack) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension FlowplayerSDK.OVPConfig {
  public struct IMA : Swift.Codable, Swift.Equatable {
    public let locale: Swift.String?
    public let redirects: Swift.Int?
    public let ads: [FlowplayerSDK.OVPAd]?
    public static func == (a: FlowplayerSDK.OVPConfig.IMA, b: FlowplayerSDK.OVPConfig.IMA) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct OVPConfig : Swift.Codable, Swift.Equatable {
  public let ima: FlowplayerSDK.OVPConfig.IMA?
  public let metadata: FlowplayerSDK.OVPConfig.Metadata?
  public let subtitles: FlowplayerSDK.OVPConfig.Subtitle?
  public let live: Swift.Bool?
  public let dvr: Swift.Bool?
  public let autoPlay: Swift.Bool?
  public let poster: Swift.String?
  public let src: [Swift.String]?
  public let ratio: Swift.String?
  public let ui: Swift.Int?
  public let lang: Swift.String?
  public let loop: Swift.Bool?
  public let preload: Swift.String?
  public var mediaURL: Foundation.URL? {
    get
  }
  public var posterURL: Foundation.URL? {
    get
  }
  public static func == (a: FlowplayerSDK.OVPConfig, b: FlowplayerSDK.OVPConfig) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension FlowplayerSDK.OVPConfig {
  public struct Subtitle : Swift.Codable, Swift.Identifiable {
    public var id: Foundation.UUID
    public typealias ID = Foundation.UUID
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension FlowplayerSDK.OVPConfig.Subtitle : Swift.Equatable {
  public static func == (a: FlowplayerSDK.OVPConfig.Subtitle, b: FlowplayerSDK.OVPConfig.Subtitle) -> Swift.Bool
}
public enum PlayerQuality : Swift.CaseIterable {
  case sd144
  case sd240
  case sd360
  case sd480
  case hd
  case fullHD
  case qhd
  case twoKVideo
  case fourKVideo
  case eightKVideo
  case unknown
  public static func == (a: FlowplayerSDK.PlayerQuality, b: FlowplayerSDK.PlayerQuality) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [FlowplayerSDK.PlayerQuality]
  public static var allCases: [FlowplayerSDK.PlayerQuality] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension FlowplayerSDK.OVPConfig {
  public struct Metadata : Swift.Codable, Swift.Equatable {
    public let mediaId: Swift.String?
    public let siteGroupId: Swift.String?
    public let siteId: Swift.String?
    public let playerId: Swift.String?
    public let categoryId: Swift.String?
    public let categoryName: Swift.String?
    public let title: Swift.String?
    public let description: Swift.String?
    public static func == (a: FlowplayerSDK.OVPConfig.Metadata, b: FlowplayerSDK.OVPConfig.Metadata) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public protocol FlowplayerManagerAPI : FlowplayerSDK.FlowplayerAPI {
  var adDelegate: (any FlowplayerSDK.FlowplayerAdDelegate)? { get set }
}
public protocol AdSchedule {
}
public struct AdScheduleWaterfall : FlowplayerSDK.AdSchedule {
  public let preAdBreak: FlowplayerSDK.AdBreak?
  public let midAdBreak: [FlowplayerSDK.AdBreak]?
  public let postAdBreak: FlowplayerSDK.AdBreak?
}
public struct AdScheduleRemote : FlowplayerSDK.AdSchedule {
  public let url: Foundation.URL
}
public struct MediaExternal : FlowplayerSDK.Media {
  public let url: Foundation.URL
  public let adSchedule: (any FlowplayerSDK.AdSchedule)?
  public let preferredPeakBitRate: Swift.Double?
  public init(url: Foundation.URL, adSchedule: (any FlowplayerSDK.AdSchedule)? = nil, preferredPeakBitRate: Swift.Double? = nil)
}
public protocol Media {
  var preferredPeakBitRate: Swift.Double? { get }
  var sessionID: Foundation.UUID { get }
}
extension FlowplayerSDK.Media {
  public var sessionID: Foundation.UUID {
    get
  }
}
public enum AdState : Swift.Int {
  case idle
  case start
  case loaded
  case play
  case pause
  case click
  case skip
  case complete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MediaOVP : FlowplayerSDK.Media {
  public let mediaId: Swift.String
  public let playerId: Swift.String
  public let preferredPeakBitRate: Swift.Double?
  public init(mediaId: Swift.String, playerId: Swift.String, preferredPeakBitRate: Swift.Double? = nil)
}
public enum PlayerError : Swift.Error {
  case invalidConfig
  case invalidAccessToken
  case playbackError(_: any Swift.Error)
}
extension FlowplayerSDK.PlayerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension FlowplayerSDK.PlayerError : Swift.Equatable {
  public static func == (lhs: FlowplayerSDK.PlayerError, rhs: FlowplayerSDK.PlayerError) -> Swift.Bool
}
public protocol FlowplayerAPI {
  var currentSubtitle: FlowplayerSDK.SubtitleTrack? { get }
  var currentAudio: FlowplayerSDK.AudioTrack? { get }
  var subtitleList: [FlowplayerSDK.SubtitleTrack] { get }
  var audioList: [FlowplayerSDK.AudioTrack] { get }
  var avPlayer: AVFoundation.AVPlayer? { get set }
  var autoPlay: Swift.Bool { get set }
  var sourceURL: Foundation.URL? { get }
  var state: FlowplayerSDK.PlayerState { get }
  var stateList: [FlowplayerSDK.PlayerState] { get }
  var playbackState: FlowplayerSDK.PlaybackState { get }
  var playbackStateList: [FlowplayerSDK.PlaybackState] { get }
  var duration: CoreMedia.CMTime? { get }
  var position: CoreMedia.CMTime? { get }
  var rate: Swift.Float { get set }
  var media: (any FlowplayerSDK.Media)? { get }
  var mediaHistoryList: [any FlowplayerSDK.Media] { get }
  var preferredPeakBitRate: Swift.Double? { get }
  var quality: FlowplayerSDK.PlayerQuality? { get }
  var volume: Swift.Float { get set }
  var bufferLoadedPercented: Swift.Double { get }
  var isMuted: Swift.Bool { get set }
  var isReady: Swift.Bool { get }
  var delegate: (any FlowplayerSDK.FlowplayerDelegate)? { get set }
  var playbackType: FlowplayerSDK.PlaybackType { get }
  var ovpConfig: FlowplayerSDK.OVPConfig? { get }
  func load(external media: FlowplayerSDK.MediaExternal)
  func load(ovp media: FlowplayerSDK.MediaOVP)
  @discardableResult
  func reload() -> Swift.Bool
  func pause()
  func play()
  func stop()
  func seek(_ value: Swift.Double)
  func selectTrack(audio id: Swift.Int)
  func selectTrack(subtitle id: Swift.Int)
}
extension Foundation.NSNotification.Name {
  public static let flowplayerDidReceiveConfig: Foundation.Notification.Name
  public static let flowplayerDidReceiveMediaItem: Foundation.Notification.Name
  public static let flowplayerDidChangeState: Foundation.Notification.Name
  public static let flowplayerDidChangePlaybackState: Foundation.Notification.Name
  public static let flowplayerDidFailWithError: Foundation.Notification.Name
  public static let flowplayerDidChangeIsMuted: Foundation.Notification.Name
  public static let flowplayerDidChangeVolume: Foundation.Notification.Name
  public static let flowplayerDidChangeRate: Foundation.Notification.Name
  public static let flowplayerDidLoadSubtitleTracks: Foundation.Notification.Name
  public static let flowplayerDidLoadAudioTracks: Foundation.Notification.Name
  public static let flowplayerDidChangeDuration: Foundation.Notification.Name
  public static let flowplayerDidChangePosition: Foundation.Notification.Name
  public static let flowplayerDidSelectAudioTrack: Foundation.Notification.Name
  public static let flowplayerDidSelectSubtitleTrack: Foundation.Notification.Name
  public static let flowplayerDidChangeQuality: Foundation.Notification.Name
  public static let flowplayerDidChangeSeekState: Foundation.Notification.Name
}
public protocol FlowplayerDelegate : AnyObject {
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeState state: FlowplayerSDK.PlayerState)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangePlaybackState state: FlowplayerSDK.PlaybackState)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeVolume volume: Swift.Float)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeRate rate: Swift.Float)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeMute mute: Swift.Bool)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangePosition position: Swift.Double)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeDuration duration: Swift.Double)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didFailWith error: FlowplayerSDK.PlayerError)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, loadedTracks audioList: [FlowplayerSDK.AudioTrack])
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, loadedTracks subtitleList: [FlowplayerSDK.SubtitleTrack])
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didReceiveConfig ovpConfig: FlowplayerSDK.OVPConfig)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, selectedTrack audio: FlowplayerSDK.AudioTrack)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, selectedTrack subtitle: FlowplayerSDK.SubtitleTrack)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeQuality quality: FlowplayerSDK.PlayerQuality)
  func player(_ player: any FlowplayerSDK.FlowplayerAPI, didChangeSeek state: FlowplayerSDK.SeekState, to position: Swift.Double)
}
extension FlowplayerSDK.FlowplayerDelegate {
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeState _: FlowplayerSDK.PlayerState)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangePlaybackState _: FlowplayerSDK.PlaybackState)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeVolume _: Swift.Float)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeRate _: Swift.Float)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeMute _: Swift.Bool)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangePosition _: Swift.Double)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeDuration _: Swift.Double)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didFailWith _: FlowplayerSDK.PlayerError)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, loadedTracks _: [FlowplayerSDK.AudioTrack])
  public func player(_: any FlowplayerSDK.FlowplayerAPI, loadedTracks _: [FlowplayerSDK.SubtitleTrack])
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didReceiveConfig _: FlowplayerSDK.OVPConfig)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, selectedTrack _: FlowplayerSDK.AudioTrack)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, selectedTrack _: FlowplayerSDK.SubtitleTrack)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeQuality _: FlowplayerSDK.PlayerQuality)
  public func player(_: any FlowplayerSDK.FlowplayerAPI, didChangeSeek _: FlowplayerSDK.SeekState, to _: Swift.Double)
}
public struct AdBreak : Swift.Equatable {
  public var adTags: [Swift.String]
  public let offset: Swift.Int
  public init(adTags: [Swift.String], offset: Swift.Int = -1)
  public static func == (a: FlowplayerSDK.AdBreak, b: FlowplayerSDK.AdBreak) -> Swift.Bool
}
public enum PlaybackType : Swift.String {
  case file
  case vod
  case live
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let flowplayerAdDidChangeState: Foundation.Notification.Name
  public static let flowplayerAdDidFail: Foundation.Notification.Name
}
public enum PlayerState : Swift.Int, Swift.CaseIterable {
  case idle
  case load
  case ready
  case play
  case pause
  case buffer
  case complete
  case failure
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FlowplayerSDK.PlayerState]
  public typealias RawValue = Swift.Int
  public static var allCases: [FlowplayerSDK.PlayerState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum PlaybackState : Swift.Int {
  case idle
  case playing
  case casting
  case ads
  case ended
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FlowplayerSDK.ViewLifecycle : Swift.Equatable {}
extension FlowplayerSDK.ViewLifecycle : Swift.Hashable {}
extension FlowplayerSDK.ViewLifecycle : Swift.RawRepresentable {}
extension FlowplayerSDK.SeekState : Swift.Equatable {}
extension FlowplayerSDK.SeekState : Swift.Hashable {}
extension FlowplayerSDK.AdType : Swift.Equatable {}
extension FlowplayerSDK.AdType : Swift.Hashable {}
extension FlowplayerSDK.AdType : Swift.RawRepresentable {}
extension FlowplayerSDK.LogLevel : Swift.Hashable {}
extension FlowplayerSDK.LogLevel : Swift.RawRepresentable {}
extension FlowplayerSDK.AdError : Swift.Equatable {}
extension FlowplayerSDK.AdError : Swift.Hashable {}
extension FlowplayerSDK.PlayerQuality : Swift.Equatable {}
extension FlowplayerSDK.PlayerQuality : Swift.Hashable {}
extension FlowplayerSDK.AdState : Swift.Equatable {}
extension FlowplayerSDK.AdState : Swift.Hashable {}
extension FlowplayerSDK.AdState : Swift.RawRepresentable {}
extension FlowplayerSDK.PlaybackType : Swift.Equatable {}
extension FlowplayerSDK.PlaybackType : Swift.Hashable {}
extension FlowplayerSDK.PlaybackType : Swift.RawRepresentable {}
extension FlowplayerSDK.PlayerState : Swift.Equatable {}
extension FlowplayerSDK.PlayerState : Swift.Hashable {}
extension FlowplayerSDK.PlayerState : Swift.RawRepresentable {}
extension FlowplayerSDK.PlaybackState : Swift.Equatable {}
extension FlowplayerSDK.PlaybackState : Swift.Hashable {}
extension FlowplayerSDK.PlaybackState : Swift.RawRepresentable {}
